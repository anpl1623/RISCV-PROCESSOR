/**
 * Codasip s.r.o.
 *
 * CONFIDENTIAL
 *
 * Copyright 2022 Codasip s.r.o.
 *
 * All Rights Reserved.
 *
 * NOTICE: All information contained in this file, is and shall remain the property of
 * Codasip s.r.o. and its suppliers, if any.
 *
 * The intellectual and technical concepts contained herein are confidential and proprietary to
 * Codasip s.r.o. and are protected by trade secret and copyright law.  In addition, elements of the
 * technical concepts may be patent pending.
 *
 * This file is part of the Codasip Studio product. No part of the Studio product, including this
 * file, may be use, copied, modified, or distributed except in accordance with the terms contained
 * in Codasip license agreement under which you obtained this file.
 *
 *  \file   ca_resources.codal
 *  \author Codasip
 *  \date   09.02.2022
 *  \brief  cycle accurate model
 */
 
#include "ca_defines.hcodal"
#include "config.hcodal"

#define BOOLEAN_BIT     1    // Boolean control bit of width 1-bit
#define TWO_BIT         2    // Two bit wide control signal

pipeline pipe
{
    IF, ID, EX, ME, WB
};

// -------------------------------------------------------------------------------------------------
// Fetch stage
// -------------------------------------------------------------------------------------------------

signal bit[ADDR_W] s_if_nextpc;
signal bit[ADDR_W] s_if_pcin;

// -------------------------------------------------------------------------------------------------
// Decode stage
// -------------------------------------------------------------------------------------------------
// Program Counter
register bit[ADDR_W] r_id_pc                    { pipeline = pipe.ID; };

// Preserved registers for load hazard handling
register bit[INSTR_W] r_id_instr_preserved      { default = NOP_INSTRUCTION; };
register bit[ADDR_W] r_id_pc_preserved          { default = 0; };

// Instruction
signal bit[INSTR_W] s_id_instr;

// Instruction opcode + func3 + func7
signal bit[OPC_W] s_id_opc;

// Decoder Outputs
// ALU Operation Control
signal bit[ALUOP_W] s_id_aluop;

// ALU Source Control
signal bit[SRC1_W] s_id_alusrc1;
signal bit[SRC2_W] s_id_alusrc2;

// Register File Write Control
signal bit[REGWRITE_W] s_id_regwrite;

// HALT Control
signal bit[HALT_W] s_id_halt;

// Memory operation control
signal bit[MEMOP_W] s_id_memop;

// Load hazard detection
signal bit[BOOLEAN_BIT] s_id_loadhaz;

// Branch Control
signal bit[BRANCH_W] s_id_brnchop;
signal bit[BRADD_W] s_id_branchsel;

// Register File Write Source Select
signal bit[RFWT_W] s_id_rfwt_sel;

// Instruction Fields
signal bit[RF_XPR_W] s_id_rs1;
signal bit[RF_XPR_W] s_id_rs2;
signal bit[RF_XPR_W] s_id_rd;

// Immediate fields and selection
signal bit[IMM_W] s_id_immsel;
signal bit[WORD_W] s_id_immedi;
signal bit[WORD_W] s_id_immedb;
signal bit[WORD_W] s_id_immeds;
signal bit[WORD_W] s_id_immedu;
signal bit[WORD_W] s_id_immedj;
signal bit[WORD_W] s_id_immed;

// Register File Data
signal bit[WORD_W] s_id_reg1;
signal bit[WORD_W] s_id_reg2;

// Forwarding control signals
signal bit[RFF1_W] s_rff1_sel;
signal bit[RFF2_W] s_rff2_sel;
signal bit[WORD_W] s_rff1_src;
signal bit[WORD_W] s_rff2_src;

// -------------------------------------------------------------------------------------------------
// Execute stage
// -------------------------------------------------------------------------------------------------

// Pipelined Program Counter + Instruction
register bit[ADDR_W] r_ex_pc                    { pipeline = pipe.EX; };
register bit[INSTR_W] r_ex_instr                { pipeline = pipe.EX; };
register bit[HALT_W] r_ex_halt                  { pipeline = pipe.EX; };

// Memory operation control registers
register bit[MEMOP_W] r_ex_memop                { pipeline = pipe.EX; };
register bit[TWO_BIT] r_ex_memsize              { pipeline = pipe.EX; };
register bit[WORD_W] r_ex_wtdat                 { pipeline = pipe.EX; };

// Decoder Outputs
register bit[ALUOP_W] r_ex_aluop                { pipeline = pipe.EX; };
register bit[SRC1_W] r_ex_alusrc1              { pipeline = pipe.EX; };
register bit[SRC2_W] r_ex_alusrc2              { pipeline = pipe.EX; };
register bit[REGWRITE_W] r_ex_regwrite          { pipeline = pipe.EX; };
register bit[BRANCH_W] r_ex_brnchop             { pipeline = pipe.EX; };
register bit[BRADD_W] r_ex_branchsel            { pipeline = pipe.EX; };
register bit[RFWT_W] r_ex_rfwt_sel             { pipeline = pipe.EX; };

// Register File Write Address
register bit[RF_XPR_W] r_ex_rd                  { pipeline = pipe.EX; };

// Immediate Data
register bit[WORD_W] r_ex_immed                 { pipeline = pipe.EX; };

// Register File Data
register bit[WORD_W] r_ex_reg1                  { pipeline = pipe.EX; };
register bit[WORD_W] r_ex_reg2                  { pipeline = pipe.EX; };

// Memory size and encoded data signals
signal bit[TWO_BIT] s_ex_memsize;
signal bit[WORD_W] s_ex_encoded_data;

// ALU Data
signal bit[WORD_W] s_ex_src1_operand;
signal bit[WORD_W] s_ex_src2_operand;
signal bit[WORD_W] s_ex_src1;
signal bit[WORD_W] s_ex_src2;
signal bit[WORD_W] s_ex_alu;

// Zero flag
signal bit[BOOLEAN_BIT] s_ex_zero;

// Branch target address
signal bit[WORD_W] s_ex_target_address;

// Forwarding
signal bit[FWDA_W] s_ex_fwdA_sel;
signal bit[FWDB_W] s_ex_fwdB_sel;
signal bit[WORD_W] s_ex_fwdA_src;
signal bit[WORD_W] s_ex_fwdB_src;
register bit[RF_XPR_W] r_ex_src1                { pipeline = pipe.EX; };
register bit[RF_XPR_W] r_ex_src2                { pipeline = pipe.EX; };

// ECC
signal bit[BOOLEAN_BIT] s_ex_p1;
signal bit[BOOLEAN_BIT] s_ex_p2;
signal bit[BOOLEAN_BIT] s_ex_p4;
signal bit[BOOLEAN_BIT] s_ex_p8;
signal bit[BOOLEAN_BIT] s_ex_p16;
signal bit[BOOLEAN_BIT] s_ex_p32;
// Combined syndrome bits
signal bit[6] s_ex_ecc; 

// -------------------------------------------------------------------------------------------------
// Memory stage
// -------------------------------------------------------------------------------------------------

// Pipelined Program Counter + Instruction
register bit[ADDR_W] r_me_pc                    { pipeline = pipe.ME; };
register bit[INSTR_W] r_me_instr                { pipeline = pipe.ME; };

// Memory operation control registers
register bit[MEMOP_W] r_me_memop                { pipeline = pipe.ME; };
register bit[TWO_BIT] r_me_memsize              { pipeline = pipe.ME; };
register bit[WORD_W] r_me_wtdat                 { pipeline = pipe.ME; };

// Memory data signals
signal bit[WORD_W] s_me_decoded_data;
signal bit[WORD_W] s_me_mem_result;

// Control Signals
register bit[REGWRITE_W] r_me_regwrite          { pipeline = pipe.ME; };
register bit[BRANCH_W] r_me_brnchop             { pipeline = pipe.ME; };
register bit[RFWT_W] r_me_rfwt_sel             { pipeline = pipe.ME; };

// Register File Write Address
register bit[RF_XPR_W] r_me_rd                  { pipeline = pipe.ME; };

// ALU Data and Zero Flag
register bit[WORD_W] r_me_alu                   { pipeline = pipe.ME; };
register bit[BOOLEAN_BIT] r_me_zero             { pipeline = pipe.ME; };

// Branch signals
register bit[WORD_W] r_me_target_addr           { pipeline = pipe.ME; };
signal bit[BOOLEAN_BIT] s_me_pcsrc;

signal bit[WORD_W] s_ex_bradd;
register bit[WORD_W] r_wb_pc_plus_4             { pipeline = pipe.WB; };

// -------------------------------------------------------------------------------------------------
// Writeback stage
// -------------------------------------------------------------------------------------------------

// Pipelined Program Counter + Instruction
register bit[ADDR_W] r_wb_pc                    { pipeline = pipe.WB; };
register bit[INSTR_W] r_wb_instr                { pipeline = pipe.WB; };

// Memory data register
register bit[WORD_W] r_wb_memdat                { pipeline = pipe.WB; };

// Control Signals
register bit[REGWRITE_W] r_wb_regwrite          { pipeline = pipe.WB; };
register bit[RFWT_W] r_wb_rfwt_sel             { pipeline = pipe.WB; };

// Register File Write Address
register bit[RF_XPR_W] r_wb_rd                  { pipeline = pipe.WB; };

// ALU Data
register bit[WORD_W] r_wb_alu                   { pipeline = pipe.WB; };

// Write Data
signal bit[WORD_W] s_wb_result;

// -------------------------------------------------------------------------------------------------
// Pipeline control
// -------------------------------------------------------------------------------------------------

signal   bit[1] s_if_stall;
signal   bit[1] s_id_stall;
signal   bit[1] s_id_clear;
register bit[1] r_id_clear                      {default = true;};
register bit[1] r_id_stall                      {default = false;};
signal   bit[1] s_ex_stall;
signal   bit[1] s_ex_clear;
signal   bit[1] s_me_stall;
signal   bit[1] s_me_clear;
signal   bit[1] s_wb_stall;
signal   bit[1] s_wb_clear;

// -------------------------------------------------------------------------------------------------
// SYSCALL support for simulation
// -------------------------------------------------------------------------------------------------
signal bit [BOOLEAN_BIT]       s_syscall_pending;
signal bit [BOOLEAN_BIT]       s_syscall_stall;
register bit [TWO_BIT]         r_syscall_delay         {default = 0;};